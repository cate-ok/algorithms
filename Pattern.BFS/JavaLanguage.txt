List<Double> result = new ArrayList<>();

Queue<TreeNode> queue = new LinkedList<>();
queue.offer(root);
while (!queue.isEmpty()) 

levelSize = queue.size();
TreeNode currentNode = queue.poll();

TreeNode currentNode = queue.poll();
result.add(levelSum / levelSize);

System.out.print("Level averages are: " + result);


public static List<Double> findLevelAverages(TreeNode root) {
    List<Double> result = new ArrayList<>();    
    Queue<TreeNode> queue = new LinkedList<>();
    int levelSize;

    queue.offer(root);

    while (!queue.isEmpty())
    {
        levelSize = queue.size();
        double sum = 0;

        for (int i = 0; i<levelSize; i++)
        {
            TreeNode node = queue.poll();
            sum += node.val;

            if (node.left != null)
                queue.offer(node.left);
            if (node.right != null)
                queue.offer(node.right);
        }
        result.add(sum/levelSize);
    }
    return result;
  }